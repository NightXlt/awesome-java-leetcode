package com.blankj.hard._126

import com.blankj.ext.print

/**
 * [
["magic","manic","mania","maria","marta","marty","party","parry","perry","peary","pearl"],
["magic","manic","mania","maria","marta","marty","marry","merry","perry","peary","pearl"],
["magic","manic","mania","maria","marta","marty","marry","parry","perry","peary","pearl"],
["magic","manic","mania","maria","maris","paris","parks","perks","peaks","pears","pearl"]
]
 */
class FindLadders {

    /**
     * 这道题被卡了超时
     * 1. 交互那里, also 改回了 temp
     * 2. 生成所有 neighbor 由一次性全部生成改为了, 逐个遍历生成, 因为当遍历到结束 word 时, 我们可以跳过后续的节点, 也算剪枝了.
     * 3. 做的真忐忑啊, 好多 case 没考虑到, 比如在这个 case 中, 要移除 neighbor 节点一定是每一层访问结束后, 不然会导致漏解的情况.
     *      比如其中一个 neighbor 节点在前面被访问到了, 可能也是后面的一个 word 的 neighbor. 所以是等每一层结束之后再清理吧.
     */
    fun findLadders(
        beginWord: String,
        endWord: String,
        wordList: List<String>
    ): List<List<String>> {
        val unVisited = wordList.toMutableSet()
        if (endWord !in unVisited) return emptyList()
        var begin = mutableSetOf(beginWord)
        var end = mutableSetOf(endWord)
        unVisited.remove(beginWord)
        unVisited.remove(endWord)
        val map = mutableMapOf<String, MutableList<String>>() //存储每个节点的邻居节点
        var isTopDown = true
        var isTraversalEnd = false
        while (begin.isNotEmpty() && end.isNotEmpty()) {
            if (begin.size > end.size) {
                val temp = begin
                begin = end
                end = temp
                isTopDown = !isTopDown
            }
            val validNeighbors = mutableSetOf<String>()
            for (word in begin) {
                val chars = word.toCharArray()
                for (i in chars.indices) {
                    val temp = chars[i]
                    for (c in 'a'..'z') { //暴力枚举可能的邻居节点
                        if (c == temp) continue
                        chars[i] = c
                        val neighbor = String(chars)
                        val key = if (isTopDown) word else neighbor
                        val value = if (isTopDown) neighbor else word
                        val list = map.getOrPut(key) { mutableListOf() }
                        if (neighbor in end) {
                            isTraversalEnd = true
                            list.add(value)
                        }
                        if (isTraversalEnd || neighbor !in unVisited) continue
                        list.add(value)
                        validNeighbors.add(neighbor)
                    }
                    chars[i] = temp
                }
            }
            if (isTraversalEnd) {
                val res = mutableListOf<List<String>>()
                dfs(map, res, beginWord, endWord, ArrayDeque())
                return res
            }
            unVisited.removeAll(validNeighbors)
            begin = validNeighbors
        }
        return emptyList()
    }

    private fun dfs(
        map: MutableMap<String, MutableList<String>>,
        res: MutableList<List<String>>,
        beginWord: String,
        endWord: String,
        queue: ArrayDeque<String>
    ) {
        queue.add(beginWord) //beginWord 可能不在集合中，需要单独添加
        if (beginWord == endWord) {
            res.add(queue.toList())
            queue.removeLast()
            return
        }
        if (map.containsKey(beginWord)) {
            map[beginWord]?.forEach {
                dfs(map, res, it, endWord, queue)
            }
        }
        queue.removeLast()
    }

    private fun getNeighbors(word: String): List<String> {
        val builder = StringBuilder(word)
        val res = mutableListOf<String>()
        for ((i, c) in word.withIndex()) {
            for (newChar in 'a'..'z') {
                if (newChar == c) continue
                builder[i] = newChar
                res.add(builder.toString())
            }
            builder[i] = c
        }
        return res
    }
}

fun main() {
    FindLadders().findLadders(
        "hot", "dog",
        listOf("hot", "dog", "dot")
    ).print()
    val start = System.currentTimeMillis()
    FindLadders().findLadders(
        "aaaaa", "uuuuu",
        listOf(
            "aaaaa",
            "waaaa",
            "wbaaa",
            "xaaaa",
            "xbaaa",
            "bbaaa",
            "bbwaa",
            "bbwba",
            "bbxaa",
            "bbxba",
            "bbbba",
            "wbbba",
            "wbbbb",
            "xbbba",
            "xbbbb",
            "cbbbb",
            "cwbbb",
            "cwcbb",
            "cxbbb",
            "cxcbb",
            "cccbb",
            "cccwb",
            "cccwc",
            "cccxb",
            "cccxc",
            "ccccc",
            "wcccc",
            "wdccc",
            "xcccc",
            "xdccc",
            "ddccc",
            "ddwcc",
            "ddwdc",
            "ddxcc",
            "ddxdc",
            "ddddc",
            "wdddc",
            "wdddd",
            "xdddc",
            "xdddd",
            "edddd",
            "ewddd",
            "ewedd",
            "exddd",
            "exedd",
            "eeedd",
            "eeewd",
            "eeewe",
            "eeexd",
            "eeexe",
            "eeeee",
            "weeee",
            "wfeee",
            "xeeee",
            "xfeee",
            "ffeee",
            "ffwee",
            "ffwfe",
            "ffxee",
            "ffxfe",
            "ffffe",
            "wfffe",
            "wffff",
            "xfffe",
            "xffff",
            "gffff",
            "gwfff",
            "gwgff",
            "gxfff",
            "gxgff",
            "gggff",
            "gggwf",
            "gggwg",
            "gggxf",
            "gggxg",
            "ggggg",
            "wgggg",
            "whggg",
            "xgggg",
            "xhggg",
            "hhggg",
            "hhwgg",
            "hhwhg",
            "hhxgg",
            "hhxhg",
            "hhhhg",
            "whhhg",
            "whhhh",
            "xhhhg",
            "xhhhh",
            "ihhhh",
            "iwhhh",
            "iwihh",
            "ixhhh",
            "ixihh",
            "iiihh",
            "iiiwh",
            "iiiwi",
            "iiixh",
            "iiixi",
            "iiiii",
            "wiiii",
            "wjiii",
            "xiiii",
            "xjiii",
            "jjiii",
            "jjwii",
            "jjwji",
            "jjxii",
            "jjxji",
            "jjjji",
            "wjjji",
            "wjjjj",
            "xjjji",
            "xjjjj",
            "kjjjj",
            "kwjjj",
            "kwkjj",
            "kxjjj",
            "kxkjj",
            "kkkjj",
            "kkkwj",
            "kkkwk",
            "kkkxj",
            "kkkxk",
            "kkkkk",
            "wkkkk",
            "wlkkk",
            "xkkkk",
            "xlkkk",
            "llkkk",
            "llwkk",
            "llwlk",
            "llxkk",
            "llxlk",
            "llllk",
            "wlllk",
            "wllll",
            "xlllk",
            "xllll",
            "mllll",
            "mwlll",
            "mwmll",
            "mxlll",
            "mxmll",
            "mmmll",
            "mmmwl",
            "mmmwm",
            "mmmxl",
            "mmmxm",
            "mmmmm",
            "wmmmm",
            "wnmmm",
            "xmmmm",
            "xnmmm",
            "nnmmm",
            "nnwmm",
            "nnwnm",
            "nnxmm",
            "nnxnm",
            "nnnnm",
            "wnnnm",
            "wnnnn",
            "xnnnm",
            "xnnnn",
            "onnnn",
            "ownnn",
            "owonn",
            "oxnnn",
            "oxonn",
            "ooonn",
            "ooown",
            "ooowo",
            "oooxn",
            "oooxo",
            "ooooo",
            "woooo",
            "wpooo",
            "xoooo",
            "xpooo",
            "ppooo",
            "ppwoo",
            "ppwpo",
            "ppxoo",
            "ppxpo",
            "ppppo",
            "wpppo",
            "wpppp",
            "xpppo",
            "xpppp",
            "qpppp",
            "qwppp",
            "qwqpp",
            "qxppp",
            "qxqpp",
            "qqqpp",
            "qqqwp",
            "qqqwq",
            "qqqxp",
            "qqqxq",
            "qqqqq",
            "wqqqq",
            "wrqqq",
            "xqqqq",
            "xrqqq",
            "rrqqq",
            "rrwqq",
            "rrwrq",
            "rrxqq",
            "rrxrq",
            "rrrrq",
            "wrrrq",
            "wrrrr",
            "xrrrq",
            "xrrrr",
            "srrrr",
            "swrrr",
            "swsrr",
            "sxrrr",
            "sxsrr",
            "sssrr",
            "ssswr",
            "sssws",
            "sssxr",
            "sssxs",
            "sssss",
            "wssss",
            "wtsss",
            "xssss",
            "xtsss",
            "ttsss",
            "ttwss",
            "ttwts",
            "ttxss",
            "ttxts",
            "tttts",
            "wttts",
            "wtttt",
            "xttts",
            "xtttt",
            "utttt",
            "uwttt",
            "uwutt",
            "uxttt",
            "uxutt",
            "uuutt",
            "uuuwt",
            "uuuwu",
            "uuuxt",
            "uuuxu",
            "uuuuu",
            "zzzzz",
            "zzzzy",
            "zzzyy",
            "zzyyy",
            "zzyyx",
            "zzyxx",
            "zzxxx",
            "zzxxw",
            "zzxww",
            "zzwww",
            "zzwwv",
            "zzwvv",
            "zzvvv",
            "zzvvu",
            "zzvuu",
            "zzuuu",
            "zzuut",
            "zzutt",
            "zzttt",
            "zztts",
            "zztss",
            "zzsss",
            "zzssr",
            "zzsrr",
            "zzrrr",
            "zzrrq",
            "zzrqq",
            "zzqqq",
            "zzqqp",
            "zzqpp",
            "zzppp",
            "zzppo",
            "zzpoo",
            "zzooo",
            "zzoon",
            "zzonn",
            "zznnn",
            "zznnm",
            "zznmm",
            "zzmmm",
            "zzmml",
            "zzmll",
            "zzlll",
            "zzllk",
            "zzlkk",
            "zzkkk",
            "zzkkj",
            "zzkjj",
            "zzjjj",
            "zzjji",
            "zzjii",
            "zziii",
            "zziih",
            "zzihh",
            "zzhhh",
            "zzhhg",
            "zzhgg",
            "zzggg",
            "zzggf",
            "zzgff",
            "zzfff",
            "zzffe",
            "zzfee",
            "zzeee",
            "zzeed",
            "zzedd",
            "zzddd",
            "zzddc",
            "zzdcc",
            "zzccc",
            "zzccz",
            "azccz",
            "aaccz",
            "aaacz",
            "aaaaz",
            "uuuzu",
            "uuzzu",
            "uzzzu",
            "zzzzu"
        )
    ).print()
    println(System.currentTimeMillis() - start)
    FindLadders().findLadders(
        "magic", "pearl",
        listOf(
            "flail",
            "halon",
            "lexus",
            "joint",
            "pears",
            "slabs",
            "lorie",
            "lapse",
            "wroth",
            "yalow",
            "swear",
            "cavil",
            "piety",
            "yogis",
            "dhaka",
            "laxer",
            "tatum",
            "provo",
            "truss",
            "tends",
            "deana",
            "dried",
            "hutch",
            "basho",
            "flyby",
            "miler",
            "fries",
            "floes",
            "lingo",
            "wider",
            "scary",
            "marks",
            "perry",
            "igloo",
            "melts",
            "lanny",
            "satan",
            "foamy",
            "perks",
            "denim",
            "plugs",
            "cloak",
            "cyril",
            "women",
            "issue",
            "rocky",
            "marry",
            "trash",
            "merry",
            "topic",
            "hicks",
            "dicky",
            "prado",
            "casio",
            "lapel",
            "diane",
            "serer",
            "paige",
            "parry",
            "elope",
            "balds",
            "dated",
            "copra",
            "earth",
            "marty",
            "slake",
            "balms",
            "daryl",
            "loves",
            "civet",
            "sweat",
            "daley",
            "touch",
            "maria",
            "dacca",
            "muggy",
            "chore",
            "felix",
            "ogled",
            "acids",
            "terse",
            "cults",
            "darla",
            "snubs",
            "boats",
            "recta",
            "cohan",
            "purse",
            "joist",
            "grosz",
            "sheri",
            "steam",
            "manic",
            "luisa",
            "gluts",
            "spits",
            "boxer",
            "abner",
            "cooke",
            "scowl",
            "kenya",
            "hasps",
            "roger",
            "edwin",
            "black",
            "terns",
            "folks",
            "demur",
            "dingo",
            "party",
            "brian",
            "numbs",
            "forgo",
            "gunny",
            "waled",
            "bucks",
            "titan",
            "ruffs",
            "pizza",
            "ravel",
            "poole",
            "suits",
            "stoic",
            "segre",
            "white",
            "lemur",
            "belts",
            "scums",
            "parks",
            "gusts",
            "ozark",
            "umped",
            "heard",
            "lorna",
            "emile",
            "orbit",
            "onset",
            "cruet",
            "amiss",
            "fumed",
            "gelds",
            "italy",
            "rakes",
            "loxed",
            "kilts",
            "mania",
            "tombs",
            "gaped",
            "merge",
            "molar",
            "smith",
            "tangs",
            "misty",
            "wefts",
            "yawns",
            "smile",
            "scuff",
            "width",
            "paris",
            "coded",
            "sodom",
            "shits",
            "benny",
            "pudgy",
            "mayer",
            "peary",
            "curve",
            "tulsa",
            "ramos",
            "thick",
            "dogie",
            "gourd",
            "strop",
            "ahmad",
            "clove",
            "tract",
            "calyx",
            "maris",
            "wants",
            "lipid",
            "pearl",
            "maybe",
            "banjo",
            "south",
            "blend",
            "diana",
            "lanai",
            "waged",
            "shari",
            "magic",
            "duchy",
            "decca",
            "wried",
            "maine",
            "nutty",
            "turns",
            "satyr",
            "holds",
            "finks",
            "twits",
            "peaks",
            "teems",
            "peace",
            "melon",
            "czars",
            "robby",
            "tabby",
            "shove",
            "minty",
            "marta",
            "dregs",
            "lacks",
            "casts",
            "aruba",
            "stall",
            "nurse",
            "jewry",
            "knuth"
        )
    ).print()
}